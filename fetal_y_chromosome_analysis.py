import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\nimport statsmodels.api as sm\n\n# Load dataset\ndef load_data(filepath):\n    data = pd.read_csv(filepath)\n    return data\n\n# Preprocess data\ndef preprocess_data(data):\n    # Handle missing values\n    data = data.dropna()\n    # Assuming the target variable is 'y_chromosome_concentration' and features are all other columns\n    X = data.drop('y_chromosome_concentration', axis=1)\n    y = data['y_chromosome_concentration']\n    return X, y\n\n# Train regression models\ndef train_models(X_train, y_train):\n    models = {\n        'Linear Regression': LinearRegression(),\n        'Ridge Regression': Ridge(),\n        'Lasso Regression': Lasso(),\n        'Random Forest Regression': RandomForestRegressor()\n    }\n    \n    trained_models = {}\n    for name, model in models.items():\n        model.fit(X_train, y_train)\n        trained_models[name] = model\n        \n    return trained_models\n\n# Evaluate models\ndef evaluate_models(models, X_test, y_test):\n    results = {}\n    for name, model in models.items():\n        y_pred = model.predict(X_test)\n        r2 = r2_score(y_test, y_pred)\n        results[name] = r2\n    return results\n\n# Perform significance testing\ndef significance_test(X, y, model):\n    X_const = sm.add_constant(X)  # add constant for intercept\n    est = sm.OLS(y, X_const)\n    est2 = est.fit()\n    return est2.summary()\n\n# Main function\ndef main():\n    data = load_data('path_to_your_data.csv')  # Specify your data path\n    X, y = preprocess_data(data)\n    \n    # Split the data\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    \n    # Train models\n    models = train_models(X_train, y_train)\n    \n    # Evaluate models\n    results = evaluate_models(models, X_test, y_test)\n    \n    # Print model comparison\n    print("Model Comparison (RÂ² scores):")\n    for model_name, r2 in results.items():\n        print(f"{model_name}: {r2:.4f}")\n        \n    # Perform significance testing for each model\n    for name, model in models.items():\n        print(f"\nSignificance testing for {name}:")\n        print(significance_test(X_train, y_train, model))\n\nif __name__ == "__main__":\n    main()\n